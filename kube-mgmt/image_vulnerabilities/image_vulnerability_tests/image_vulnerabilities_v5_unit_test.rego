package kubernetes.admission

##PATH
## vulnerabilities.<namespace>.<resource_id>.metadata.labels["starboard.container.name"]
## vulnerabilities.<namespace>.<resource_id>.report.summary["criticalCount"]
import data.kubernetes.vulnerabilities

default allow = false

##DENY
deny[{"msg": msg}] {
	msg := get_type_result(crit_count_by_image)
}

##ALLOW
allow {
	count(image_match) > 0
    get_vulnerabilities(crit_count_by_image) == "0"
}

##FUNCTIONS
get_type_result(crit_count_by_image) = msg {
	count(image_match) == 0
    input_image
    msg := sprintf("No vulnerability reports for image %v found, cannot deploy", [input_image])
}

get_type_result(crit_count_by_image) = msg {
	count(image_match) > 0
    get_vulnerabilities(crit_count_by_image) == "1"
    v := { v | crit_count_by_image[i] > 0; v := i}
    msg := sprintf("Critical vulnerabilities found in image: %v", [v])
}

get_vulnerabilities(crit_count_by_image) = "1" {
	vulns := crit_count_by_image[image]
    vulns > 0
}

get_vulnerabilities(crit_count_by_image) = "0" {
    vulns := { vulns | vulns := crit_count_by_image[_]  }
    sum(vulns) < 1
}

###RULES
crit_count_by_image[image] = cCount {
    item := vulnerabilities[_][_]
    image := item.metadata.labels["starboard.container.name"]
    cCount := item.report.summary["criticalCount"]
}

image_match[a] {
    item := vulnerabilities[_][_]
    a := item.metadata.labels["starboard.container.name"]
    some i
    input_image[i] == a
}

input_image[img] {
	img := input.request.object.spec.containers["image"]
}

input_image[img] {
	img := input.request.object.spec.template.spec.containers["image"]
}

#vulnerabilities = {"dev": {"resource-id": {"metadata": {"labels": {"starboard.container.name": "nginx"}}, "report": {"summary": {"criticalCount": 0}}}} , "test":{"resource-id": {"metadata": {"labels": {"starboard.container.name": "busybox"}}, "report": {"summary": {"criticalCount": 1}}}}}

test_deny_vulnerability_good {
	in := { 
    	"kind": "AdmissionReview",
        "apiVersion":"admission.k8s.io/v1beta1",
        "request":{
            "uid": "66c738ea-1b4c-11e9-a7d2-080027f75b4a",
            "kind": {
                "group": "extensions",
                "version": "v1beta1",
                "kind": "Ingress"
            },
            "resource":{
                "group": "extensions",
                "version": "v1beta1",
                "resource": "ingresses"
            },
            "namespace": "production", 
            "operation": "CREATE",
            "userInfo": {
                "username": "minikube-user",
                "groups": [
                    "system:masters",
                    "system:authenticated"
                    ]
            },
            "object": {
                "metadata": {
                    "name": "ingress-ok",
                    "namespace": "production",
                    "uid": "66c73498-1b4c-11e9-a7d2-080027f75b4a",
                    "generation": 1,
                    "creationTimestamp": "2019-01-18T18:10:56Z"
                },
                "spec": {
                    "rules":[
                        {
                            "host": "signin.acmecorp.com",
                            "http":{
                                "paths":[
                                    {
                                        "backend": {
                                            "serviceName": "nginx",
                                            "servicePort": 80
                                        }
                                    }
                                ]
                            }
                        }
                    ],
                   "containers": {
                	"image": "nginx",
                    "image": "busybox"
                }
                },
                
                "status":{
                    "loadBalancer":{}
                }
            },
            "oldObject": null
        }
    }
    
    p := { 
    	"dev": {
        	"resource-id": 
            	{"metadata": 
                	{"labels": 
                    	{"starboard.container.name": "nginx"}
                        },
                 "report": {
                 	"summary": {
                    	"criticalCount": 0}
					}
				}
			},
		"test": {
        	"resource-id": {
            	"metadata": {
                	"labels": {
                    	"starboard.container.name": "busybox"}
                        }, 
                "report": {
                	"summary": {
                    	"criticalCount": 0}
				}
			}
		}
	}
    
    violations := deny 
    	with input as in
        with data.kubernetes.vulnerabilities as p
    
    count(violations) == 0
}

test_deny_vulnerability_bad {
	in := { 
    	"kind": "AdmissionReview",
        "apiVersion":"admission.k8s.io/v1beta1",
        "request":{
            "uid": "66c738ea-1b4c-11e9-a7d2-080027f75b4a",
            "kind": {
                "group": "extensions",
                "version": "v1beta1",
                "kind": "Ingress"
            },
            "resource":{
                "group": "extensions",
                "version": "v1beta1",
                "resource": "ingresses"
            },
            "namespace": "production", 
            "operation": "CREATE",
            "userInfo": {
                "username": "minikube-user",
                "groups": [
                    "system:masters",
                    "system:authenticated"
                    ]
            },
            "object": {
                "metadata": {
                    "name": "ingress-ok",
                    "namespace": "production",
                    "uid": "66c73498-1b4c-11e9-a7d2-080027f75b4a",
                    "generation": 1,
                    "creationTimestamp": "2019-01-18T18:10:56Z"
                },
                "spec": {
                    "rules":[
                        {
                            "host": "signin.acmecorp.com",
                            "http":{
                                "paths":[
                                    {
                                        "backend": {
                                            "serviceName": "nginx",
                                            "servicePort": 80
                                        }
                                    }
                                ]
                            }
                        }
                    ],
                   "containers": {
                	"image": "nginx",
                    "image": "busybox"
                }
                },
                
                "status":{
                    "loadBalancer":{}
                }
            },
            "oldObject": null
        }
    }
    
    p := { 
    	"dev": {
        	"resource-id": 
            	{"metadata": 
                	{"labels": 
                    	{"starboard.container.name": "nginx"}
                        },
                 "report": {
                 	"summary": {
                    	"criticalCount": 5}
					}
				}
			},
		"test": {
        	"resource-id": {
            	"metadata": {
                	"labels": {
                    	"starboard.container.name": "busybox"}}, 
                "report": {
                	"summary": {
                    	"criticalCount": 1}
				}
			}
		}
	}
    
    violations := deny 
    	with input as in
        with data.kubernetes.vulnerabilities as p
    count(violations) > 0
}
